@inject IJSRuntime JSRuntime

@if (!BottomToolbar)
{
    <div class="@ToolbarCSSClass" id="QuillToolBar" @ref="@ToolBar" style="@ToolbarCssStyle">
        @ToolbarContent
    </div>
}
<div class="@EditorCssClass" id="QuillEditor" @ref="@QuillElement" style="@EditorCssStyle">
    @EditorContent
</div>
@if (BottomToolbar)
{
    <div class="@ToolbarCSSClass" id="QuillBottomToolbar" @ref="@ToolBar" style="@ToolbarCssStyle">
        @ToolbarContent
    </div>
}

@code {

    [Parameter]
    public RenderFragment EditorContent { get; set; }

    [Parameter]
    public RenderFragment ToolbarContent { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }
        = false;

    [Parameter]
    public string Placeholder { get; set; }
        = "Compose an epic...";

    [Parameter]
    public string Theme { get; set; }
        = "snow";

    [Parameter]
    public string[] Formats { get; set; }
        = null;

    [Parameter]
    public string DebugLevel { get; set; }
        = "info";

    /// <summary>
    /// Support for normal css classes
    /// </summary>
    [Parameter]
    public string EditorCssClass { get; set; }
        = string.Empty;

    /// <summary>
    /// Support for normal css styles
    /// </summary>
    [Parameter]
    public string EditorCssStyle { get; set; }
        = string.Empty;

    /// <summary>
    /// Support for normal css classes
    /// </summary>
    [Parameter]
    public string ToolbarCSSClass { get; set; }
        = string.Empty;

    /// <summary>
    /// Support for normal css styles
    /// </summary>
    [Parameter]
    public string ToolbarCssStyle { get; set; }
        = string.Empty;

    [Parameter]
    public bool BottomToolbar { get; set; }

    [Parameter]
    public bool Syntax { get; set; }

    private ElementReference QuillElement;
    private ElementReference ToolBar;

    protected override async Task
        OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Interop.CreateQuill(
                JSRuntime,
                QuillElement,
                ToolBar,
                ReadOnly,
                Placeholder,
                Theme,
                Formats,
                DebugLevel,
                Syntax
            );
        }
    }

    public async Task<string> GetText() => await GetText(default);

    public async Task<string> GetText(CancellationToken cancellationToken)
    {
        return await Interop.GetText(
            JSRuntime, QuillElement, cancellationToken);
    }

    public async Task<string> GetHTML() => await GetHTML(default);

    public async Task<string> GetHTML(CancellationToken cancellationToken)
    {
        return await Interop.GetHTML(
            JSRuntime, QuillElement, cancellationToken);
    }

    public async Task<string> GetContent() => await GetContent(default);

    public async Task<string> GetContent(CancellationToken cancellationToken)
    {
        return await Interop.GetContent(
            JSRuntime, QuillElement, cancellationToken);
    }

    public async Task LoadContent(string Content) => await LoadContent(Content, default);

    public async Task LoadContent(string Content, CancellationToken cancellationToken)
    {
        var QuillDelta =
            await Interop.LoadQuillContent(
                JSRuntime, QuillElement, Content, cancellationToken);
    }

    public async Task LoadHTMLContent(string quillHTMLContent) => await LoadHTMLContent(quillHTMLContent, default);

    public async Task LoadHTMLContent(string quillHTMLContent, CancellationToken cancellationToken)
    {
        var QuillDelta =
            await Interop.LoadQuillHTMLContent(
                JSRuntime, QuillElement, quillHTMLContent, cancellationToken);
    }

    public async Task InsertImage(string ImageURL) => await InsertImage(ImageURL, default);

    public async Task InsertImage(string ImageURL, CancellationToken cancellationToken)
    {
        var QuillDelta =
            await Interop.InsertQuillImage(
                JSRuntime, QuillElement, ImageURL, cancellationToken);
    }

    public async Task InsertText(string text) => await InsertText(text, default);

    public async Task InsertText(string text, CancellationToken cancellationToken)
    {
        var QuillDelta =
            await Interop.InsertQuillText(
                JSRuntime, QuillElement, text, cancellationToken);
    }

    public async Task EnableEditor(bool mode) => await EnableEditor(mode, default);

    public async Task EnableEditor(bool mode, CancellationToken cancellationToken)
    {
        var QuillDelta =
            await Interop.EnableQuillEditor(
                JSRuntime, QuillElement, mode, cancellationToken);
    }

}
