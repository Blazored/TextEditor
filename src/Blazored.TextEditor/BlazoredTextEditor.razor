@using System.ComponentModel
@using System.Text.Json
@inject IJSRuntime JSRuntime

@if (!BottomToolbar)
{
    <div class="@ToolbarCSSClass" id="@GetToolbarId()" @ref="@ToolBar" style="@ToolbarCssStyle">
        @ToolbarContent
    </div>
}
<div class="@EditorCssClass" id="@EditorId" @ref="@QuillElement" style="@EditorCssStyle">
    @EditorContent
</div>
@if (BottomToolbar)
{
    <div class="@ToolbarCSSClass" id="@GetToolbarId()" @ref="@ToolBar" style="@ToolbarCssStyle">
        @ToolbarContent
    </div>
}

@code {
    /// <summary>
    /// Set a custom id for the editor. Recommended if you have multiple BlazoredTextEditors on the same page.
    /// </summary>
    [Parameter]
    public string EditorId { get; set; } = "QuillEditor";

    /// <summary>
    /// Set a custom id for the toolbar. Recommended if you have multiple BlazoredTextEditors on the same page.
    /// </summary>
    [Parameter]
    public string ToolbarId { get; set; } = null;

    private string GetToolbarId()
    {
        return ToolbarId ?? (!BottomToolbar ? "QuillToolBar" : "QuillBottomToolbar");
    }

    [Parameter]
    public RenderFragment EditorContent { get; set; }

    [Parameter]
    public RenderFragment ToolbarContent { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }
        = false;

    /// <summary>
    /// Pass in initial quill 'delta' content to be rendered.
    /// Not required. Can be empty or null.
    /// </summary>
    //[Parameter]
    //public string InitialContent { get; set; } = string.Empty;

    [Parameter]
    public string Placeholder { get; set; }
        = "Compose an epic...";

    [Parameter]
    public string Theme { get; set; }
        = "snow";

    [Parameter]
    public string[] Formats { get; set; }
        = null;

    [Parameter]
    public string DebugLevel { get; set; }
        = "info";

    /// <summary>
    /// Support for normal css classes
    /// </summary>
    [Parameter]
    public string EditorCssClass { get; set; }
        = string.Empty;

    /// <summary>
    /// Support for normal css styles
    /// </summary>
    [Parameter]
    public string EditorCssStyle { get; set; }
        = string.Empty;

    /// <summary>
    /// Support for normal css classes
    /// </summary>
    [Parameter]
    public string ToolbarCSSClass { get; set; }
        = string.Empty;

    /// <summary>
    /// Support for normal css styles
    /// </summary>
    [Parameter]
    public string ToolbarCssStyle { get; set; }
        = string.Empty;

    [Parameter]
    public bool BottomToolbar { get; set; }

    [Parameter]
    public bool Syntax { get; set; }

    [Parameter]
    public string Content { get; set; }

    [Parameter]
    public EventCallback<string> ContentChanged { get; set; }

    private ElementReference QuillElement;
    private ElementReference ToolBar;
    private DotNetObjectReference<BlazoredTextEditor> _ObjectReference;

    private bool IsRendered = false;

    protected override async Task
        OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Interop.CreateQuill(
                JSRuntime,
                QuillElement,
                ToolBar,
                ReadOnly,
                Placeholder,
                Theme,
                Formats,
                DebugLevel,
                Syntax,
                _ObjectReference

            );

            await LoadContent();
        }
        if (!IsRendered)
        {
            await LoadContent();
        }
    }

    private string previousContent = string.Empty;

    private async Task LoadContent()
    {
        if (!string.IsNullOrWhiteSpace(Content))
            await LoadContent(Content);
        previousContent = Content;
        IsRendered = true;
    }

    protected override void OnParametersSet()
    {
        if (Content !=previousContent)
        {
            IsRendered = false;
        }

    }


    protected override void OnInitialized()
    {
        _ObjectReference = DotNetObjectReference.Create(this);
    }

    public async Task<string> GetText()
    {
        return await Interop.GetText(
            JSRuntime, QuillElement);
    }

    public async Task<string> GetText(CancellationToken cancellationToken)
    {
        return await Interop.GetText(
            JSRuntime, QuillElement, cancellationToken);
    }

    public async Task<string> GetHTML()
    {
        return await Interop.GetHTML(
            JSRuntime, QuillElement);
    }

    public async Task<string> GetHTML(CancellationToken cancellationToken)
    {
        return await Interop.GetHTML(
            JSRuntime, QuillElement, cancellationToken);
    }

    public async Task<string> GetContent()
    {
        return await Interop.GetContent(
            JSRuntime, QuillElement);
    }

    public async Task<string> GetContent(CancellationToken cancellationToken)
    {
        return await Interop.GetContent(
            JSRuntime, QuillElement, cancellationToken);
    }

    public async Task LoadContent(string Content)
    {
        var QuillDelta =
            await Interop.LoadQuillContent(
                JSRuntime, QuillElement, Content);
    }

    public async Task LoadContent(string Content, CancellationToken cancellationToken)
    {
        var QuillDelta =
            await Interop.LoadQuillContent(
                JSRuntime, QuillElement, Content, cancellationToken);
    }

    public async Task LoadHTMLContent(string quillHTMLContent)
    {
        var QuillDelta =
            await Interop.LoadQuillHTMLContent(
                JSRuntime, QuillElement, quillHTMLContent);
    }

    public async Task LoadHTMLContent(string quillHTMLContent, CancellationToken cancellationToken)
    {
        var QuillDelta =
            await Interop.LoadQuillHTMLContent(
                JSRuntime, QuillElement, quillHTMLContent, cancellationToken);
    }

    public async Task InsertImage(string ImageURL)
    {
        var QuillDelta =
            await Interop.InsertQuillImage(
                JSRuntime, QuillElement, ImageURL);
    }

    public async Task InsertImage(string ImageURL, CancellationToken cancellationToken)
    {
        var QuillDelta =
            await Interop.InsertQuillImage(
                JSRuntime, QuillElement, ImageURL, cancellationToken);
    }

    public async Task InsertText(string text)
    {
        var QuillDelta =
            await Interop.InsertQuillText(
                JSRuntime, QuillElement, text);
    }

    public async Task InsertText(string text, CancellationToken cancellationToken)
    {
        var QuillDelta =
            await Interop.InsertQuillText(
                JSRuntime, QuillElement, text, cancellationToken);
    }

    public async Task EnableEditor(bool mode)
    {
        var QuillDelta =
            await Interop.EnableQuillEditor(
                JSRuntime, QuillElement, mode);
    }

    public async Task EnableEditor(bool mode, CancellationToken cancellationToken)
    {
        var QuillDelta =
            await Interop.EnableQuillEditor(
                JSRuntime, QuillElement, mode, cancellationToken);
    }

    private async Task GetQuill()
    {
        if (IsRendered)
        {
            Content = await GetContent();
            await ContentChanged.InvokeAsync(Content);
        }

    }


    [JSInvokable("DeltaChanged")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    public async Task OnChange(JsonElement delta)
    {
        if (DebugLevel.Equals("info"))
        {
            Console.WriteLine($"Quill Editor Element: {EditorId} Invoked Change in Blazor");
            Console.WriteLine("    Contents:" + delta.ToString());
        }
        await ContentChanged.InvokeAsync(delta.ToString());
    }




}
